/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as DestinationsIndexImport } from './routes/destinations/index'
import { Route as PostsSlugImport } from './routes/posts/$slug'
import { Route as DestinationsSlugImport } from './routes/destinations/$slug'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const DestinationsIndexRoute = DestinationsIndexImport.update({
  id: '/destinations/',
  path: '/destinations/',
  getParentRoute: () => rootRoute,
} as any)

const PostsSlugRoute = PostsSlugImport.update({
  id: '/posts/$slug',
  path: '/posts/$slug',
  getParentRoute: () => rootRoute,
} as any)

const DestinationsSlugRoute = DestinationsSlugImport.update({
  id: '/destinations/$slug',
  path: '/destinations/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/destinations/$slug': {
      id: '/destinations/$slug'
      path: '/destinations/$slug'
      fullPath: '/destinations/$slug'
      preLoaderRoute: typeof DestinationsSlugImport
      parentRoute: typeof rootRoute
    }
    '/posts/$slug': {
      id: '/posts/$slug'
      path: '/posts/$slug'
      fullPath: '/posts/$slug'
      preLoaderRoute: typeof PostsSlugImport
      parentRoute: typeof rootRoute
    }
    '/destinations/': {
      id: '/destinations/'
      path: '/destinations'
      fullPath: '/destinations'
      preLoaderRoute: typeof DestinationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/destinations/$slug': typeof DestinationsSlugRoute
  '/posts/$slug': typeof PostsSlugRoute
  '/destinations': typeof DestinationsIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/destinations/$slug': typeof DestinationsSlugRoute
  '/posts/$slug': typeof PostsSlugRoute
  '/destinations': typeof DestinationsIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/destinations/$slug': typeof DestinationsSlugRoute
  '/posts/$slug': typeof PostsSlugRoute
  '/destinations/': typeof DestinationsIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/destinations/$slug'
    | '/posts/$slug'
    | '/destinations'
    | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/destinations/$slug' | '/posts/$slug' | '/destinations' | '/posts'
  id:
    | '__root__'
    | '/'
    | '/destinations/$slug'
    | '/posts/$slug'
    | '/destinations/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DestinationsSlugRoute: typeof DestinationsSlugRoute
  PostsSlugRoute: typeof PostsSlugRoute
  DestinationsIndexRoute: typeof DestinationsIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DestinationsSlugRoute: DestinationsSlugRoute,
  PostsSlugRoute: PostsSlugRoute,
  DestinationsIndexRoute: DestinationsIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/destinations/$slug",
        "/posts/$slug",
        "/destinations/",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/destinations/$slug": {
      "filePath": "destinations/$slug.tsx"
    },
    "/posts/$slug": {
      "filePath": "posts/$slug.tsx"
    },
    "/destinations/": {
      "filePath": "destinations/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
